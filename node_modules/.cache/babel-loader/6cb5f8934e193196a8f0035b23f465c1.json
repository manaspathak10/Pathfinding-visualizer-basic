{"ast":null,"code":"// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\n// export function dijkstra(grid, startNode, finishNode) {\n//   const visitedNodesInOrder = [];\n//   startNode.distance = 0;\n//   const unvisitedNodes = getAllNodes(grid);\n//   while (!!unvisitedNodes.length) {\n//     sortNodesByDistance(unvisitedNodes);\n//     const closestNode = unvisitedNodes.shift();\n//     // If we encounter a wall, we skip it.\n//     if (closestNode.isWall) continue;\n//     // If the closest node is at a distance of infinity,\n//     // we must be trapped and should therefore stop.\n//     if (closestNode.distance === Infinity) return visitedNodesInOrder;\n//     closestNode.isVisited = true;\n//     visitedNodesInOrder.push(closestNode);\n//     if (closestNode === finishNode) return visitedNodesInOrder;\n//     updateUnvisitedNeighbors(closestNode, grid);\n//   }\n// }\nexport function dijkstra(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  var pq = new PriorityQueue(this.grid.length * this.grid[0].length);\n  pq.enqueue(startNode, 0);\n  this.grid.forEach(node => {\n    if (node !== startNode) node.distance = Infinity;\n    node.previousNode = null;\n  });\n\n  while (!pq.isEmpty()) {\n    const closestNode = pq.dequeue(); // If we encounter a wall, we skip it.\n\n    if (closestNode.isWall || closestNode.isVisited) continue; // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n\n    this.closestNode.forEach(neighbor => {\n      neighbor.distance = closestNode.distance + 1;\n      pq.enqueue(neighbor, neighbor.distance);\n    });\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const {\n    col,\n    row\n  } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n\n  return nodes;\n} // Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\n\n\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n\n  return nodesInShortestPathOrder;\n}","map":{"version":3,"sources":["C:/Users/Acer/Desktop/my-app/src/algorithms/dijkstra.js"],"names":["dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","getAllNodes","pq","PriorityQueue","length","enqueue","forEach","node","Infinity","previousNode","isEmpty","closestNode","dequeue","isWall","isVisited","neighbor","push","updateUnvisitedNeighbors","sortNodesByDistance","sort","nodeA","nodeB","unvisitedNeighbors","getUnvisitedNeighbors","neighbors","col","row","filter","nodes","getNodesInShortestPathOrder","nodesInShortestPathOrder","currentNode","unshift"],"mappings":"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","sourcesContent":["// Performs Dijkstra's algorithm; returns *all* nodes in the order\r\n// in which they were visited. Also makes nodes point back to their\r\n// previous node, effectively allowing us to compute the shortest path\r\n// by backtracking from the finish node.\r\n// export function dijkstra(grid, startNode, finishNode) {\r\n//   const visitedNodesInOrder = [];\r\n//   startNode.distance = 0;\r\n//   const unvisitedNodes = getAllNodes(grid);\r\n//   while (!!unvisitedNodes.length) {\r\n//     sortNodesByDistance(unvisitedNodes);\r\n//     const closestNode = unvisitedNodes.shift();\r\n//     // If we encounter a wall, we skip it.\r\n//     if (closestNode.isWall) continue;\r\n//     // If the closest node is at a distance of infinity,\r\n//     // we must be trapped and should therefore stop.\r\n//     if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n//     closestNode.isVisited = true;\r\n//     visitedNodesInOrder.push(closestNode);\r\n//     if (closestNode === finishNode) return visitedNodesInOrder;\r\n//     updateUnvisitedNeighbors(closestNode, grid);\r\n//   }\r\n// }\r\nexport function dijkstra(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid);\r\n  var pq=new PriorityQueue(this.grid.length*this.grid[0].length);\r\n    pq.enqueue(startNode, 0);\r\n    this.grid.forEach(node => {\r\n      if (node !== startNode) node.distance = Infinity;\r\n      node.previousNode = null;\r\n    });\r\n  while (!pq.isEmpty()) {\r\n    const closestNode = pq.dequeue();\r\n    // If we encounter a wall, we skip it.\r\n    if (closestNode.isWall || closestNode.isVisited) continue;\r\n    // If the closest node is at a distance of infinity,\r\n    // we must be trapped and should therefore stop.\r\n    this.closestNode.forEach(neighbor => {\r\n      neighbor.distance=closestNode.distance+1;\r\n      pq.enqueue(neighbor, neighbor.distance);\r\n    });\r\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    updateUnvisitedNeighbors(closestNode, grid);\r\n  }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const {col, row} = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called *after* the dijkstra method above.\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}