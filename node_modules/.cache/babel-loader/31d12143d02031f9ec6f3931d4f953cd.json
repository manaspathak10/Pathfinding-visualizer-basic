{"ast":null,"code":"// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\n// export function dijkstra(grid, startNode, finishNode) {\n//   const visitedNodesInOrder = [];\n//   startNode.distance = 0;\n//   const unvisitedNodes = getAllNodes(grid);\n//   while (!!unvisitedNodes.length) {\n//     sortNodesByDistance(unvisitedNodes);\n//     const closestNode = unvisitedNodes.shift();\n//     // If we encounter a wall, we skip it.\n//     if (closestNode.isWall) continue;\n//     // If the closest node is at a distance of infinity,\n//     // we must be trapped and should therefore stop.\n//     if (closestNode.distance === Infinity) return visitedNodesInOrder;\n//     closestNode.isVisited = true;\n//     visitedNodesInOrder.push(closestNode);\n//     if (closestNode === finishNode) return visitedNodesInOrder;\n//     updateUnvisitedNeighbors(closestNode, grid);\n//   }\n// }\nclass PriorityQueue {\n  constructor(maxSize) {\n    // Set default max size if not provided\n    if (isNaN(maxSize)) {\n      maxSize = 10;\n    }\n\n    this.maxSize = maxSize; // Init an array that'll contain the queue values.\n\n    this.container = [];\n  } // Helper function to display all values while developing\n\n\n  display() {\n    console.log(this.container);\n  } // Checks if queue is empty\n\n\n  isEmpty() {\n    return this.container.length === 0;\n  } // checks if queue is full\n\n\n  isFull() {\n    return this.container.length >= this.maxSize;\n  }\n\n  enqueue(data, priority) {\n    // Check if Queue is full\n    if (this.isFull()) {\n      console.log(\"Queue Overflow!\");\n      return;\n    }\n\n    let currElem = new this.Element(data, priority);\n    let addedFlag = false; // Since we want to add elements to end, we'll just push them.\n\n    for (let i = 0; i < this.container.length; i++) {\n      if (currElem.priority < this.container[i].priority) {\n        this.container.splice(i, 0, currElem);\n        addedFlag = true;\n        break;\n      }\n    }\n\n    if (!addedFlag) {\n      this.container.push(currElem);\n    }\n  }\n\n  dequeue() {\n    // Check if empty\n    if (this.isEmpty()) {\n      console.log(\"Queue Underflow!\");\n      return;\n    }\n\n    return this.container.pop();\n  }\n\n  peek() {\n    if (isEmpty()) {\n      console.log(\"Queue Underflow!\");\n      return;\n    }\n\n    return this.container[this.container.length - 1];\n  }\n\n  clear() {\n    this.container = [];\n  }\n\n} // Create an inner class that we'll use to create new nodes in the queue\n// Each element has some data and a priority\n\n\nPriorityQueue.prototype.Element = class {\n  constructor(data, priority) {\n    this.data = data;\n    this.priority = priority;\n  }\n\n};\nexport function dijkstra(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  let pq = new PriorityQueue();\n  pq.enqueue(startNode, 0);\n  this.grid.forEach(node => {\n    if (node !== startNode) node.distance = Infinity;\n    node.previousNode = null;\n  });\n\n  while (!!pq.isEmpty()) {\n    const closestNode = pq.dequeue(); // If we encounter a wall, we skip it.\n\n    if (closestNode.isWall || closestNode.isVisited) continue; // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n\n    this.closestNode.forEach(neighbor => {\n      neighbor.distance = closestNode.distance + 1;\n      pq.enqueue(neighbor, neighbor.distance);\n    });\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const {\n    col,\n    row\n  } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n\n  return nodes;\n} // Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\n\n\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n\n  return nodesInShortestPathOrder;\n}","map":{"version":3,"sources":["C:/Users/Acer/Desktop/my-app/src/algorithms/dijkstra.js"],"names":["PriorityQueue","constructor","maxSize","isNaN","container","display","console","log","isEmpty","length","isFull","enqueue","data","priority","currElem","Element","addedFlag","i","splice","push","dequeue","pop","peek","clear","prototype","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","getAllNodes","pq","forEach","node","Infinity","previousNode","closestNode","isWall","isVisited","neighbor","updateUnvisitedNeighbors","sortNodesByDistance","sort","nodeA","nodeB","unvisitedNeighbors","getUnvisitedNeighbors","neighbors","col","row","filter","nodes","getNodesInShortestPathOrder","nodesInShortestPathOrder","currentNode","unshift"],"mappings":"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","sourcesContent":["// Performs Dijkstra's algorithm; returns *all* nodes in the order\r\n// in which they were visited. Also makes nodes point back to their\r\n// previous node, effectively allowing us to compute the shortest path\r\n// by backtracking from the finish node.\r\n// export function dijkstra(grid, startNode, finishNode) {\r\n//   const visitedNodesInOrder = [];\r\n//   startNode.distance = 0;\r\n//   const unvisitedNodes = getAllNodes(grid);\r\n//   while (!!unvisitedNodes.length) {\r\n//     sortNodesByDistance(unvisitedNodes);\r\n//     const closestNode = unvisitedNodes.shift();\r\n//     // If we encounter a wall, we skip it.\r\n//     if (closestNode.isWall) continue;\r\n//     // If the closest node is at a distance of infinity,\r\n//     // we must be trapped and should therefore stop.\r\n//     if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n//     closestNode.isVisited = true;\r\n//     visitedNodesInOrder.push(closestNode);\r\n//     if (closestNode === finishNode) return visitedNodesInOrder;\r\n//     updateUnvisitedNeighbors(closestNode, grid);\r\n//   }\r\n// }\r\nclass PriorityQueue {\r\n  constructor(maxSize) {\r\n     // Set default max size if not provided\r\n     if (isNaN(maxSize)) {\r\n        maxSize = 10;\r\n      }\r\n     this.maxSize = maxSize;\r\n     // Init an array that'll contain the queue values.\r\n     this.container = [];\r\n  }\r\n  // Helper function to display all values while developing\r\n  display() {\r\n     console.log(this.container);\r\n  }\r\n  // Checks if queue is empty\r\n  isEmpty() {\r\n     return this.container.length === 0;\r\n  }\r\n  // checks if queue is full\r\n  isFull() {\r\n     return this.container.length >= this.maxSize;\r\n  }\r\n  enqueue(data, priority) {\r\n     // Check if Queue is full\r\n     if (this.isFull()) {\r\n        console.log(\"Queue Overflow!\");\r\n        return;\r\n     }\r\n     let currElem = new this.Element(data, priority);\r\n     let addedFlag = false;\r\n     // Since we want to add elements to end, we'll just push them.\r\n     for (let i = 0; i < this.container.length; i++) {\r\n        if (currElem.priority < this.container[i].priority) {\r\n           this.container.splice(i, 0, currElem);\r\n           addedFlag = true; break;\r\n        }\r\n     }\r\n     if (!addedFlag) {\r\n        this.container.push(currElem);\r\n     }\r\n  }\r\n  dequeue() {\r\n  // Check if empty\r\n  if (this.isEmpty()) {\r\n     console.log(\"Queue Underflow!\");\r\n     return;\r\n  }\r\n  return this.container.pop();\r\n}\r\npeek() {\r\n  if (isEmpty()) {\r\n     console.log(\"Queue Underflow!\");\r\n     return;\r\n  }\r\n  return this.container[this.container.length - 1];\r\n}\r\nclear() {\r\n  this.container = [];\r\n  }\r\n}\r\n// Create an inner class that we'll use to create new nodes in the queue\r\n// Each element has some data and a priority\r\nPriorityQueue.prototype.Element = class {\r\n  constructor(data, priority) {\r\n     this.data = data;\r\n     this.priority = priority;\r\n  }\r\n};\r\nexport function dijkstra(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid);\r\n  let pq = new PriorityQueue();\r\n  pq.enqueue(startNode, 0);\r\n  this.grid.forEach(node => {\r\n    if (node !== startNode) node.distance = Infinity;\r\n    node.previousNode = null;\r\n  });\r\n  while (!!pq.isEmpty()) {\r\n    const closestNode = pq.dequeue();\r\n    // If we encounter a wall, we skip it.\r\n    if (closestNode.isWall || closestNode.isVisited) continue;\r\n    // If the closest node is at a distance of infinity,\r\n    // we must be trapped and should therefore stop.\r\n    this.closestNode.forEach(neighbor => {\r\n      neighbor.distance = closestNode.distance + 1;\r\n      pq.enqueue(neighbor, neighbor.distance);\r\n    });\r\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    updateUnvisitedNeighbors(closestNode, grid);\r\n  }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const { col, row } = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called *after* the dijkstra method above.\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}