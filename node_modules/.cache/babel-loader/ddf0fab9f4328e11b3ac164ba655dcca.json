{"ast":null,"code":"// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\n// export function dijkstra(grid, startNode, finishNode) {\n//   const visitedNodesInOrder = [];\n//   startNode.distance = 0;\n//   const unvisitedNodes = getAllNodes(grid);\n//   while (!!unvisitedNodes.length) {\n//     sortNodesByDistance(unvisitedNodes);\n//     const closestNode = unvisitedNodes.shift();\n//     // If we encounter a wall, we skip it.\n//     if (closestNode.isWall) continue;\n//     // If the closest node is at a distance of infinity,\n//     // we must be trapped and should therefore stop.\n//     if (closestNode.distance === Infinity) return visitedNodesInOrder;\n//     closestNode.isVisited = true;\n//     visitedNodesInOrder.push(closestNode);\n//     if (closestNode === finishNode) return visitedNodesInOrder;\n//     updateUnvisitedNeighbors(closestNode, grid);\n//   }\n// }\n// export function dijkstra(grid, startNode, finishNode) {\n//   const visitedNodesInOrder = [];\n//   startNode.distance = 0;\n//   const unvisitedNodes = getAllNodes(grid);\n//   var pq = new PriorityQueue();\n//   pq.queue(startNode, 0);\n//   this.grid.forEach(node => {\n//     if (node !== startNode) node.distance = Infinity;\n//     node.previousNode = null;\n//   });\n//   while (!pq.isEmpty()) {\n//     const closestNode = pq.dequeue();\n//     // If we encounter a wall, we skip it.\n//     if (closestNode.isWall || closestNode.isVisited) continue;\n//     // If the closest node is at a distance of infinity,\n//     // we must be trapped and should therefore stop.\n//     this.closestNode.forEach(neighbor => {\n//       neighbor.distance = closestNode.distance + 1;\n//       pq.enqueue(neighbor, neighbor.distance);\n//     });\n//     if (closestNode.distance === Infinity) return visitedNodesInOrder;\n//     closestNode.isVisited = true;\n//     visitedNodesInOrder.push(closestNode);\n//     if (closestNode === finishNode) return visitedNodesInOrder;\n//     updateUnvisitedNeighbors(closestNode, grid);\n//   }\n// }\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const {\n    col,\n    row\n  } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n\n  return nodes;\n} // Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\n\n\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n\n  return nodesInShortestPathOrder;\n}","map":{"version":3,"sources":["C:/Users/Acer/Desktop/my-app/src/algorithms/dijkstra.js"],"names":["sortNodesByDistance","unvisitedNodes","sort","nodeA","nodeB","distance","updateUnvisitedNeighbors","node","grid","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","previousNode","neighbors","col","row","push","length","filter","isVisited","getAllNodes","nodes","getNodesInShortestPathOrder","finishNode","nodesInShortestPathOrder","currentNode","unshift"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,mBAAT,CAA6BC,cAA7B,EAA6C;AAC3CA,EAAAA,cAAc,CAACC,IAAf,CAAoB,CAACC,KAAD,EAAQC,KAAR,KAAkBD,KAAK,CAACE,QAAN,GAAiBD,KAAK,CAACC,QAA7D;AACD;;AAED,SAASC,wBAAT,CAAkCC,IAAlC,EAAwCC,IAAxC,EAA8C;AAC5C,QAAMC,kBAAkB,GAAGC,qBAAqB,CAACH,IAAD,EAAOC,IAAP,CAAhD;;AACA,OAAK,MAAMG,QAAX,IAAuBF,kBAAvB,EAA2C;AACzCE,IAAAA,QAAQ,CAACN,QAAT,GAAoBE,IAAI,CAACF,QAAL,GAAgB,CAApC;AACAM,IAAAA,QAAQ,CAACC,YAAT,GAAwBL,IAAxB;AACD;AACF;;AAED,SAASG,qBAAT,CAA+BH,IAA/B,EAAqCC,IAArC,EAA2C;AACzC,QAAMK,SAAS,GAAG,EAAlB;AACA,QAAM;AAAEC,IAAAA,GAAF;AAAOC,IAAAA;AAAP,MAAeR,IAArB;AACA,MAAIQ,GAAG,GAAG,CAAV,EAAaF,SAAS,CAACG,IAAV,CAAeR,IAAI,CAACO,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAd,CAAf;AACb,MAAIC,GAAG,GAAGP,IAAI,CAACS,MAAL,GAAc,CAAxB,EAA2BJ,SAAS,CAACG,IAAV,CAAeR,IAAI,CAACO,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAd,CAAf;AAC3B,MAAIA,GAAG,GAAG,CAAV,EAAaD,SAAS,CAACG,IAAV,CAAeR,IAAI,CAACO,GAAD,CAAJ,CAAUD,GAAG,GAAG,CAAhB,CAAf;AACb,MAAIA,GAAG,GAAGN,IAAI,CAAC,CAAD,CAAJ,CAAQS,MAAR,GAAiB,CAA3B,EAA8BJ,SAAS,CAACG,IAAV,CAAeR,IAAI,CAACO,GAAD,CAAJ,CAAUD,GAAG,GAAG,CAAhB,CAAf;AAC9B,SAAOD,SAAS,CAACK,MAAV,CAAiBP,QAAQ,IAAI,CAACA,QAAQ,CAACQ,SAAvC,CAAP;AACD;;AAED,SAASC,WAAT,CAAqBZ,IAArB,EAA2B;AACzB,QAAMa,KAAK,GAAG,EAAd;;AACA,OAAK,MAAMN,GAAX,IAAkBP,IAAlB,EAAwB;AACtB,SAAK,MAAMD,IAAX,IAAmBQ,GAAnB,EAAwB;AACtBM,MAAAA,KAAK,CAACL,IAAN,CAAWT,IAAX;AACD;AACF;;AACD,SAAOc,KAAP;AACD,C,CAED;AACA;;;AACA,OAAO,SAASC,2BAAT,CAAqCC,UAArC,EAAiD;AACtD,QAAMC,wBAAwB,GAAG,EAAjC;AACA,MAAIC,WAAW,GAAGF,UAAlB;;AACA,SAAOE,WAAW,KAAK,IAAvB,EAA6B;AAC3BD,IAAAA,wBAAwB,CAACE,OAAzB,CAAiCD,WAAjC;AACAA,IAAAA,WAAW,GAAGA,WAAW,CAACb,YAA1B;AACD;;AACD,SAAOY,wBAAP;AACD","sourcesContent":["// Performs Dijkstra's algorithm; returns *all* nodes in the order\r\n// in which they were visited. Also makes nodes point back to their\r\n// previous node, effectively allowing us to compute the shortest path\r\n// by backtracking from the finish node.\r\n// export function dijkstra(grid, startNode, finishNode) {\r\n//   const visitedNodesInOrder = [];\r\n//   startNode.distance = 0;\r\n//   const unvisitedNodes = getAllNodes(grid);\r\n//   while (!!unvisitedNodes.length) {\r\n//     sortNodesByDistance(unvisitedNodes);\r\n//     const closestNode = unvisitedNodes.shift();\r\n//     // If we encounter a wall, we skip it.\r\n//     if (closestNode.isWall) continue;\r\n//     // If the closest node is at a distance of infinity,\r\n//     // we must be trapped and should therefore stop.\r\n//     if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n//     closestNode.isVisited = true;\r\n//     visitedNodesInOrder.push(closestNode);\r\n//     if (closestNode === finishNode) return visitedNodesInOrder;\r\n//     updateUnvisitedNeighbors(closestNode, grid);\r\n//   }\r\n// }\r\n// export function dijkstra(grid, startNode, finishNode) {\r\n//   const visitedNodesInOrder = [];\r\n//   startNode.distance = 0;\r\n//   const unvisitedNodes = getAllNodes(grid);\r\n//   var pq = new PriorityQueue();\r\n//   pq.queue(startNode, 0);\r\n//   this.grid.forEach(node => {\r\n//     if (node !== startNode) node.distance = Infinity;\r\n//     node.previousNode = null;\r\n//   });\r\n//   while (!pq.isEmpty()) {\r\n//     const closestNode = pq.dequeue();\r\n//     // If we encounter a wall, we skip it.\r\n//     if (closestNode.isWall || closestNode.isVisited) continue;\r\n//     // If the closest node is at a distance of infinity,\r\n//     // we must be trapped and should therefore stop.\r\n//     this.closestNode.forEach(neighbor => {\r\n//       neighbor.distance = closestNode.distance + 1;\r\n//       pq.enqueue(neighbor, neighbor.distance);\r\n//     });\r\n//     if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n//     closestNode.isVisited = true;\r\n//     visitedNodesInOrder.push(closestNode);\r\n//     if (closestNode === finishNode) return visitedNodesInOrder;\r\n//     updateUnvisitedNeighbors(closestNode, grid);\r\n//   }\r\n// }\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const { col, row } = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called *after* the dijkstra method above.\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}