{"ast":null,"code":"// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function dijkstra(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n\n  while (!!unvisitedNodes.length) {\n    //console.log(unvisitedNodes);\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift(); // If we encounter a wall, we skip it.\n\n    if (closestNode.isWall) continue; // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n} // class PriorityQueue {\n//   constructor(maxSize) {\n//      // Set default max size if not provided\n//      if (isNaN(maxSize)) {\n//         maxSize = 10;\n//       }\n//      this.maxSize = maxSize;\n//      // Init an array that'll contain the queue values.\n//      this.container = [];\n//   }\n//   // Helper function to display all values while developing\n//   display() {\n//      console.log(this.container);\n//   }\n//   // Checks if queue is empty\n//   isEmpty() {\n//      return this.container.length === 0;\n//   }\n//   // checks if queue is full\n//   isFull() {\n//      return this.container.length >= this.maxSize;\n//   }\n//   enqueue(data, priority) {\n//      // Check if Queue is full\n//      if (this.isFull()) {\n//         console.log(\"Queue Overflow!\");\n//         return;\n//      }\n//      let currElem = new this.Element(data, priority);\n//      let addedFlag = false;\n//      // Since we want to add elements to end, we'll just push them.\n//      for (let i = 0; i < this.container.length; i++) {\n//         if (currElem.priority < this.container[i].priority) {\n//            this.container.splice(i, 0, currElem);\n//            addedFlag = true; break;\n//         }\n//      }\n//      if (!addedFlag) {\n//         this.container.push(currElem);\n//      }\n//   }\n//   dequeue() {\n//   // Check if empty\n//   if (this.isEmpty()) {\n//      console.log(\"Queue Underflow!\");\n//      return;\n//   }\n//   return this.container.pop();\n// }\n// peek() {\n//   if (this.isEmpty()) {\n//     console.log(\"Queue Underflow!\");\n//     return;\n//   }\n//   return this.container[this.container.length - 1];\n// }\n// clear() {\n//   this.container = [];\n// }\n// // Create an inner class that we'll use to create new nodes in the queue\n// // Each element has some data and a priority\n// PriorityQueue.prototype.Element = class {\n//   constructor(data, priority) {\n//     this.data = data;\n//     this.priority = priority;\n//   }\n// };\n// export function dijkstra(grid, startNode, finishNode) {\n//   const visitedNodesInOrder = [];\n//   startNode.distance = 0;\n//   const unvisitedNodes = getAllNodes(grid);\n//   let pq = new PriorityQueue();\n//   pq.enqueue(startNode, 0);\n//   while (!pq.isEmpty()) {\n//     const closestNode = pq.dequeue();\n//     // If we encounter a wall, we skip it.\n//     if (closestNode.isWall || closestNode.isVisited) continue;\n//     // If the closest node is at a distance of infinity,\n//     // we must be trapped and should therefore stop.\n//     if (closestNode.distance === Infinity) return visitedNodesInOrder;\n//     closestNode.isVisited = true;\n//     visitedNodesInOrder.push(closestNode);\n//     if (closestNode === finishNode) return visitedNodesInOrder;\n//     updateUnvisitedNeighbors(closestNode, grid);\n//   }\n// }\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const {\n    col,\n    row\n  } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n\n  for (const row of grid) {\n    for (const node of row) {\n      if (node.isWall == False) {\n        nodes.push(node);\n      }\n    }\n  }\n\n  return nodes;\n} // Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\n\n\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n\n  return nodesInShortestPathOrder;\n}","map":{"version":3,"sources":["C:/Users/R/Desktop/Pathfinding-visualizer-basic/src/algorithms/dijkstra.js"],"names":["dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","getAllNodes","length","sortNodesByDistance","closestNode","shift","isWall","Infinity","isVisited","push","updateUnvisitedNeighbors","sort","nodeA","nodeB","node","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","previousNode","neighbors","col","row","filter","nodes","False","getNodesInShortestPathOrder","nodesInShortestPathOrder","currentNode","unshift"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,SAASA,QAAT,CAAkBC,IAAlB,EAAwBC,SAAxB,EAAmCC,UAAnC,EAA+C;AACpD,QAAMC,mBAAmB,GAAG,EAA5B;AACAF,EAAAA,SAAS,CAACG,QAAV,GAAqB,CAArB;AACA,QAAMC,cAAc,GAAGC,WAAW,CAACN,IAAD,CAAlC;;AACA,SAAO,CAAC,CAACK,cAAc,CAACE,MAAxB,EAAgC;AAC9B;AACAC,IAAAA,mBAAmB,CAACH,cAAD,CAAnB;AACA,UAAMI,WAAW,GAAGJ,cAAc,CAACK,KAAf,EAApB,CAH8B,CAI9B;;AACA,QAAID,WAAW,CAACE,MAAhB,EAAwB,SALM,CAM9B;AACA;;AACA,QAAIF,WAAW,CAACL,QAAZ,KAAyBQ,QAA7B,EAAuC,OAAOT,mBAAP;AACvCM,IAAAA,WAAW,CAACI,SAAZ,GAAwB,IAAxB;AACAV,IAAAA,mBAAmB,CAACW,IAApB,CAAyBL,WAAzB;AACA,QAAIA,WAAW,KAAKP,UAApB,EAAgC,OAAOC,mBAAP;AAChCY,IAAAA,wBAAwB,CAACN,WAAD,EAAcT,IAAd,CAAxB;AACD;AACF,C,CACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASQ,mBAAT,CAA6BH,cAA7B,EAA6C;AAC3CA,EAAAA,cAAc,CAACW,IAAf,CAAoB,CAACC,KAAD,EAAQC,KAAR,KAAkBD,KAAK,CAACb,QAAN,GAAiBc,KAAK,CAACd,QAA7D;AACD;;AAED,SAASW,wBAAT,CAAkCI,IAAlC,EAAwCnB,IAAxC,EAA8C;AAC5C,QAAMoB,kBAAkB,GAAGC,qBAAqB,CAACF,IAAD,EAAOnB,IAAP,CAAhD;;AACA,OAAK,MAAMsB,QAAX,IAAuBF,kBAAvB,EAA2C;AACzCE,IAAAA,QAAQ,CAAClB,QAAT,GAAoBe,IAAI,CAACf,QAAL,GAAgB,CAApC;AACAkB,IAAAA,QAAQ,CAACC,YAAT,GAAwBJ,IAAxB;AACD;AACF;;AAED,SAASE,qBAAT,CAA+BF,IAA/B,EAAqCnB,IAArC,EAA2C;AACzC,QAAMwB,SAAS,GAAG,EAAlB;AACA,QAAM;AAAEC,IAAAA,GAAF;AAAOC,IAAAA;AAAP,MAAeP,IAArB;AACA,MAAIO,GAAG,GAAG,CAAV,EAAaF,SAAS,CAACV,IAAV,CAAed,IAAI,CAAC0B,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAd,CAAf;AACb,MAAIC,GAAG,GAAG1B,IAAI,CAACO,MAAL,GAAc,CAAxB,EAA2BiB,SAAS,CAACV,IAAV,CAAed,IAAI,CAAC0B,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAd,CAAf;AAC3B,MAAIA,GAAG,GAAG,CAAV,EAAaD,SAAS,CAACV,IAAV,CAAed,IAAI,CAAC0B,GAAD,CAAJ,CAAUD,GAAG,GAAG,CAAhB,CAAf;AACb,MAAIA,GAAG,GAAGzB,IAAI,CAAC,CAAD,CAAJ,CAAQO,MAAR,GAAiB,CAA3B,EAA8BiB,SAAS,CAACV,IAAV,CAAed,IAAI,CAAC0B,GAAD,CAAJ,CAAUD,GAAG,GAAG,CAAhB,CAAf;AAC9B,SAAOD,SAAS,CAACG,MAAV,CAAiBL,QAAQ,IAAI,CAACA,QAAQ,CAACT,SAAvC,CAAP;AACD;;AAED,SAASP,WAAT,CAAqBN,IAArB,EAA2B;AACzB,QAAM4B,KAAK,GAAG,EAAd;;AACA,OAAK,MAAMF,GAAX,IAAkB1B,IAAlB,EAAwB;AACtB,SAAK,MAAMmB,IAAX,IAAmBO,GAAnB,EAAwB;AACtB,UAAGP,IAAI,CAACR,MAAL,IAAakB,KAAhB,EACA;AACED,QAAAA,KAAK,CAACd,IAAN,CAAWK,IAAX;AACD;AACF;AACF;;AACD,SAAOS,KAAP;AACD,C,CAED;AACA;;;AACA,OAAO,SAASE,2BAAT,CAAqC5B,UAArC,EAAiD;AACtD,QAAM6B,wBAAwB,GAAG,EAAjC;AACA,MAAIC,WAAW,GAAG9B,UAAlB;;AACA,SAAO8B,WAAW,KAAK,IAAvB,EAA6B;AAC3BD,IAAAA,wBAAwB,CAACE,OAAzB,CAAiCD,WAAjC;AACAA,IAAAA,WAAW,GAAGA,WAAW,CAACT,YAA1B;AACD;;AACD,SAAOQ,wBAAP;AACD","sourcesContent":["// Performs Dijkstra's algorithm; returns *all* nodes in the order\r\n// in which they were visited. Also makes nodes point back to their\r\n// previous node, effectively allowing us to compute the shortest path\r\n// by backtracking from the finish node.\r\nexport function dijkstra(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid);\r\n  while (!!unvisitedNodes.length) {\r\n    //console.log(unvisitedNodes);\r\n    sortNodesByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n    // If we encounter a wall, we skip it.\r\n    if (closestNode.isWall) continue;\r\n    // If the closest node is at a distance of infinity,\r\n    // we must be trapped and should therefore stop.\r\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    updateUnvisitedNeighbors(closestNode, grid);\r\n  }\r\n}\r\n// class PriorityQueue {\r\n//   constructor(maxSize) {\r\n//      // Set default max size if not provided\r\n//      if (isNaN(maxSize)) {\r\n//         maxSize = 10;\r\n//       }\r\n//      this.maxSize = maxSize;\r\n//      // Init an array that'll contain the queue values.\r\n//      this.container = [];\r\n//   }\r\n//   // Helper function to display all values while developing\r\n//   display() {\r\n//      console.log(this.container);\r\n//   }\r\n//   // Checks if queue is empty\r\n//   isEmpty() {\r\n//      return this.container.length === 0;\r\n//   }\r\n//   // checks if queue is full\r\n//   isFull() {\r\n//      return this.container.length >= this.maxSize;\r\n//   }\r\n//   enqueue(data, priority) {\r\n//      // Check if Queue is full\r\n//      if (this.isFull()) {\r\n//         console.log(\"Queue Overflow!\");\r\n//         return;\r\n//      }\r\n//      let currElem = new this.Element(data, priority);\r\n//      let addedFlag = false;\r\n//      // Since we want to add elements to end, we'll just push them.\r\n//      for (let i = 0; i < this.container.length; i++) {\r\n//         if (currElem.priority < this.container[i].priority) {\r\n//            this.container.splice(i, 0, currElem);\r\n//            addedFlag = true; break;\r\n//         }\r\n//      }\r\n//      if (!addedFlag) {\r\n//         this.container.push(currElem);\r\n//      }\r\n//   }\r\n//   dequeue() {\r\n//   // Check if empty\r\n//   if (this.isEmpty()) {\r\n//      console.log(\"Queue Underflow!\");\r\n//      return;\r\n//   }\r\n//   return this.container.pop();\r\n// }\r\n// peek() {\r\n//   if (this.isEmpty()) {\r\n//     console.log(\"Queue Underflow!\");\r\n//     return;\r\n//   }\r\n//   return this.container[this.container.length - 1];\r\n// }\r\n// clear() {\r\n//   this.container = [];\r\n// }\r\n\r\n// // Create an inner class that we'll use to create new nodes in the queue\r\n// // Each element has some data and a priority\r\n// PriorityQueue.prototype.Element = class {\r\n//   constructor(data, priority) {\r\n//     this.data = data;\r\n//     this.priority = priority;\r\n//   }\r\n// };\r\n// export function dijkstra(grid, startNode, finishNode) {\r\n//   const visitedNodesInOrder = [];\r\n//   startNode.distance = 0;\r\n//   const unvisitedNodes = getAllNodes(grid);\r\n//   let pq = new PriorityQueue();\r\n//   pq.enqueue(startNode, 0);\r\n//   while (!pq.isEmpty()) {\r\n//     const closestNode = pq.dequeue();\r\n//     // If we encounter a wall, we skip it.\r\n//     if (closestNode.isWall || closestNode.isVisited) continue;\r\n//     // If the closest node is at a distance of infinity,\r\n//     // we must be trapped and should therefore stop.\r\n\r\n//     if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n//     closestNode.isVisited = true;\r\n//     visitedNodesInOrder.push(closestNode);\r\n//     if (closestNode === finishNode) return visitedNodesInOrder;\r\n//     updateUnvisitedNeighbors(closestNode, grid);\r\n//   }\r\n// }\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const { col, row } = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      if(node.isWall==False)\r\n      {\r\n        nodes.push(node);\r\n      }\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called *after* the dijkstra method above.\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}