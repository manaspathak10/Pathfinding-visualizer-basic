{"ast":null,"code":"export function dfs(grid, startNode, finishNode) {\n  console.lgo(\"hi\"); // let s= [];\n  // let explored=new Set();\n  // s.push(startNode);\n  // explored.add(startNode);\n  // while(!s.isEmpty())\n  // {\n  // \tlet t=s.shift();\n  // \tif(t.isWall) continue;\n  // \tthis.edges[t].filter(n=>!explored.has(n)).forEach(n=>{explored.add(n);s.push(n);})\t;\n  // }\n  // const visitedNodesInOrder = [];\n  // startNode.distance = 0;\n  // const unvisitedNodes = getAllNodes(grid);\n  // while (!!unvisitedNodes.length) {\n  //   //console.log(unvisitedNodes);\n  //   sortNodesByDistance(unvisitedNodes);\n  //   const closestNode = unvisitedNodes.shift();\n  //   // If we encounter a wall, we skip it.\n  //   if (closestNode.isWall) continue;\n  //   // If the closest node is at a distance of infinity,\n  //   // we must be trapped and should therefore stop.\n  //   if (closestNode.distance === Infinity) return visitedNodesInOrder;\n  //   closestNode.isVisited = true;\n  //   visitedNodesInOrder.push(closestNode);\n  //   if (closestNode === finishNode) return visitedNodesInOrder;\n  //   updateUnvisitedNeighbors(closestNode, grid);\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const {\n    col,\n    row\n  } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n\n  for (const row of grid) {\n    for (const node of row) {\n      if (node.isWall) continue;\n      nodes.push(node);\n    }\n  }\n\n  console.log(nodes.length);\n  return nodes;\n} // Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\n\n\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n\n  return nodesInShortestPathOrder;\n}","map":{"version":3,"sources":["C:/Users/R/Desktop/Pathfinding-visualizer-basic/src/algorithms/dfs.js"],"names":["dfs","grid","startNode","finishNode","console","lgo","sortNodesByDistance","unvisitedNodes","sort","nodeA","nodeB","distance","updateUnvisitedNeighbors","node","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","previousNode","neighbors","col","row","push","length","filter","isVisited","getAllNodes","nodes","isWall","log","getNodesInShortestPathOrder","nodesInShortestPathOrder","currentNode","unshift"],"mappings":"AAAA,OAAO,SAASA,GAAT,CAAaC,IAAb,EAAmBC,SAAnB,EAA8BC,UAA9B,EACP;AACCC,EAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EADD,CAEC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC;;AAGH,SAASC,mBAAT,CAA6BC,cAA7B,EAA6C;AAC3CA,EAAAA,cAAc,CAACC,IAAf,CAAoB,CAACC,KAAD,EAAQC,KAAR,KAAkBD,KAAK,CAACE,QAAN,GAAiBD,KAAK,CAACC,QAA7D;AACD;;AAED,SAASC,wBAAT,CAAkCC,IAAlC,EAAwCZ,IAAxC,EAA8C;AAC5C,QAAMa,kBAAkB,GAAGC,qBAAqB,CAACF,IAAD,EAAOZ,IAAP,CAAhD;;AACA,OAAK,MAAMe,QAAX,IAAuBF,kBAAvB,EAA2C;AACzCE,IAAAA,QAAQ,CAACL,QAAT,GAAoBE,IAAI,CAACF,QAAL,GAAgB,CAApC;AACAK,IAAAA,QAAQ,CAACC,YAAT,GAAwBJ,IAAxB;AACD;AACF;;AAED,SAASE,qBAAT,CAA+BF,IAA/B,EAAqCZ,IAArC,EAA2C;AACzC,QAAMiB,SAAS,GAAG,EAAlB;AACA,QAAM;AAAEC,IAAAA,GAAF;AAAOC,IAAAA;AAAP,MAAeP,IAArB;AACA,MAAIO,GAAG,GAAG,CAAV,EAAaF,SAAS,CAACG,IAAV,CAAepB,IAAI,CAACmB,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAd,CAAf;AACb,MAAIC,GAAG,GAAGnB,IAAI,CAACqB,MAAL,GAAc,CAAxB,EAA2BJ,SAAS,CAACG,IAAV,CAAepB,IAAI,CAACmB,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAd,CAAf;AAC3B,MAAIA,GAAG,GAAG,CAAV,EAAaD,SAAS,CAACG,IAAV,CAAepB,IAAI,CAACmB,GAAD,CAAJ,CAAUD,GAAG,GAAG,CAAhB,CAAf;AACb,MAAIA,GAAG,GAAGlB,IAAI,CAAC,CAAD,CAAJ,CAAQqB,MAAR,GAAiB,CAA3B,EAA8BJ,SAAS,CAACG,IAAV,CAAepB,IAAI,CAACmB,GAAD,CAAJ,CAAUD,GAAG,GAAG,CAAhB,CAAf;AAC9B,SAAOD,SAAS,CAACK,MAAV,CAAiBP,QAAQ,IAAI,CAACA,QAAQ,CAACQ,SAAvC,CAAP;AACD;;AAED,SAASC,WAAT,CAAqBxB,IAArB,EAA2B;AACzB,QAAMyB,KAAK,GAAG,EAAd;;AACA,OAAK,MAAMN,GAAX,IAAkBnB,IAAlB,EAAwB;AACtB,SAAK,MAAMY,IAAX,IAAmBO,GAAnB,EAAwB;AACtB,UAAGP,IAAI,CAACc,MAAR,EAAgB;AAChBD,MAAAA,KAAK,CAACL,IAAN,CAAWR,IAAX;AAED;AACF;;AACDT,EAAAA,OAAO,CAACwB,GAAR,CAAYF,KAAK,CAACJ,MAAlB;AACA,SAAOI,KAAP;AACD,C,CAED;AACA;;;AACA,OAAO,SAASG,2BAAT,CAAqC1B,UAArC,EAAiD;AACtD,QAAM2B,wBAAwB,GAAG,EAAjC;AACA,MAAIC,WAAW,GAAG5B,UAAlB;;AACA,SAAO4B,WAAW,KAAK,IAAvB,EAA6B;AAC3BD,IAAAA,wBAAwB,CAACE,OAAzB,CAAiCD,WAAjC;AACAA,IAAAA,WAAW,GAAGA,WAAW,CAACd,YAA1B;AACD;;AACD,SAAOa,wBAAP;AACD","sourcesContent":["export function dfs(grid, startNode, finishNode) \r\n{\r\n\tconsole.lgo(\"hi\");\r\n\t// let s= [];\r\n\t// let explored=new Set();\r\n\t// s.push(startNode);\r\n\t// explored.add(startNode);\r\n\t// while(!s.isEmpty())\r\n\t// {\r\n\t// \tlet t=s.shift();\r\n\t// \tif(t.isWall) continue;\r\n\t// \tthis.edges[t].filter(n=>!explored.has(n)).forEach(n=>{explored.add(n);s.push(n);})\t;\r\n\t// }\r\n\r\n\r\n  // const visitedNodesInOrder = [];\r\n  // startNode.distance = 0;\r\n  // const unvisitedNodes = getAllNodes(grid);\r\n  // while (!!unvisitedNodes.length) {\r\n  //   //console.log(unvisitedNodes);\r\n  //   sortNodesByDistance(unvisitedNodes);\r\n  //   const closestNode = unvisitedNodes.shift();\r\n  //   // If we encounter a wall, we skip it.\r\n  //   if (closestNode.isWall) continue;\r\n  //   // If the closest node is at a distance of infinity,\r\n  //   // we must be trapped and should therefore stop.\r\n  //   if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n  //   closestNode.isVisited = true;\r\n  //   visitedNodesInOrder.push(closestNode);\r\n  //   if (closestNode === finishNode) return visitedNodesInOrder;\r\n  //   updateUnvisitedNeighbors(closestNode, grid);\r\n  }\r\n\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const { col, row } = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      if(node.isWall) continue;\r\n      nodes.push(node);\r\n      \r\n    }\r\n  }\r\n  console.log(nodes.length)\r\n  return nodes;\r\n}\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called *after* the dijkstra method above.\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}