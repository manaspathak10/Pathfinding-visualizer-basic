{"ast":null,"code":"export function dfs(grid, startNode, finishNode) {\n  //console.log(\"hi\");\n  const visitedNodesInOrder = [];\n  const dfsstack = [];\n  dfsstack.push(startNode);\n  startNode.distance = 0;\n\n  while (dfsstack.length) {\n    const currNode = dfsstack.pop();\n    if (currNode.isWall || currNode.isVisited) continue;\n    if (currNode == finishNode) return visitedNodesInOrder;\n    currNode.isVisited = true;\n    let nextNode;\n    const {\n      row,\n      col\n    } = currNode;\n\n    if (row > 0) {\n      nextNode = grid[row - 1][col];\n\n      if (!nextNode.isVisited) {\n        nextNode.previousNode = currNode;\n        dfsstack.push(nextNode);\n      }\n    }\n\n    if (row < grid.length - 1) {\n      nextNode = grid[row + 1][col];\n\n      if (!nextNode.isVisited) {\n        nextNode.previousNode = currNode;\n        dfsstack.push(nextNode);\n      }\n    }\n\n    if (col > 0) {\n      nextNode = grid[row][col - 1];\n\n      if (!nextNode.isVisited) {\n        nextNode.previousNode = currNode;\n        dfsstack.push(nextNode);\n      }\n    }\n\n    if (col < grid[0].length - 1) {\n      nextNode = grid[row][col + 1];\n\n      if (!nextNode.isVisited) {\n        nextNode.previousNode = currNode;\n        dfsstack.push(nextNode);\n      }\n    }\n  } // while (!!unvisitedNodes.length) {\n  //   //console.log(unvisitedNodes);\n  //   sortNodesByDistance(unvisitedNodes);\n  //   const closestNode = unvisitedNodes.shift();\n  //   // If we encounter a wall, we skip it.\n  //   if (closestNode.isWall) continue;\n  //   // If the closest node is at a distance of infinity,\n  //   // we must be trapped and should therefore stop.\n  //   if (closestNode.distance === Infinity) return visitedNodesInOrder;\n  //   closestNode.isVisited = true;\n  //   visitedNodesInOrder.push(closestNode);\n  //   if (closestNode === finishNode) return visitedNodesInOrder;\n  //   updateUnvisitedNeighbors(closestNode, grid);\n  // }\n\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const {\n    col,\n    row\n  } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n\n  for (const row of grid) {\n    for (const node of row) {\n      if (node.isWall) continue;\n      nodes.push(node);\n    }\n  }\n\n  console.log(nodes.length);\n  return nodes;\n} // Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\n\n\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n\n  return nodesInShortestPathOrder;\n}","map":{"version":3,"sources":["C:/Users/R/Desktop/Pathfinding-visualizer-basic/src/algorithms/dfs.js"],"names":["dfs","grid","startNode","finishNode","visitedNodesInOrder","dfsstack","push","distance","length","currNode","pop","isWall","isVisited","nextNode","row","col","previousNode","sortNodesByDistance","unvisitedNodes","sort","nodeA","nodeB","updateUnvisitedNeighbors","node","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","neighbors","filter","getAllNodes","nodes","console","log","getNodesInShortestPathOrder","nodesInShortestPathOrder","currentNode","unshift"],"mappings":"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","sourcesContent":["export function dfs(grid, startNode, finishNode) \r\n{\r\n\t//console.log(\"hi\");\r\n\t\r\n\r\n  const visitedNodesInOrder = [];\r\n  const dfsstack=[]\r\n  dfsstack.push(startNode);\r\n  startNode.distance = 0;\r\n  while(dfsstack.length)\r\n  {\r\n  \tconst currNode=dfsstack.pop();\r\n  \tif(currNode.isWall || currNode.isVisited) continue;\r\n  \tif(currNode==finishNode) return visitedNodesInOrder;\r\n  \tcurrNode.isVisited=true;\r\n  \tlet nextNode;\r\n  \tconst {row,col}=currNode;\r\n  \tif(row>0)\r\n  \t{\r\n  \t\tnextNode=grid[row-1][col];\r\n  \t\tif(!nextNode.isVisited)\r\n  \t\t{\r\n  \t\t\tnextNode.previousNode=currNode;\r\n  \t\t\tdfsstack.push(nextNode);\r\n  \t\t}\r\n  \t}\r\n\r\n  \tif(row<grid.length-1)\r\n  \t{\r\n  \t\tnextNode=grid[row+1][col];\r\n  \t\tif(!nextNode.isVisited)\r\n  \t\t{\r\n  \t\t\tnextNode.previousNode=currNode;\r\n  \t\t\tdfsstack.push(nextNode);\r\n  \t\t}\r\n  \t}\r\n  \tif(col>0)\r\n  \t{\r\n  \t\tnextNode=grid[row][col-1];\r\n  \t\tif(!nextNode.isVisited)\r\n  \t\t{\r\n  \t\t\tnextNode.previousNode=currNode;\r\n  \t\t\tdfsstack.push(nextNode);\r\n  \t\t}\r\n  \t}\r\n  \tif(col<grid[0].length-1)\r\n  \t{\r\n  \t\tnextNode=grid[row][col+1];\r\n  \t\tif(!nextNode.isVisited)\r\n  \t\t{\r\n  \t\t\tnextNode.previousNode=currNode;\r\n  \t\t\tdfsstack.push(nextNode);\r\n  \t\t}\r\n  \t}\r\n  }\r\n\r\n\r\n  // while (!!unvisitedNodes.length) {\r\n  //   //console.log(unvisitedNodes);\r\n  //   sortNodesByDistance(unvisitedNodes);\r\n  //   const closestNode = unvisitedNodes.shift();\r\n  //   // If we encounter a wall, we skip it.\r\n  //   if (closestNode.isWall) continue;\r\n  //   // If the closest node is at a distance of infinity,\r\n  //   // we must be trapped and should therefore stop.\r\n  //   if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n  //   closestNode.isVisited = true;\r\n  //   visitedNodesInOrder.push(closestNode);\r\n  //   if (closestNode === finishNode) return visitedNodesInOrder;\r\n  //   updateUnvisitedNeighbors(closestNode, grid);\r\n  // }\r\n}\r\n\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const { col, row } = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      if(node.isWall) continue;\r\n      nodes.push(node);\r\n      \r\n    }\r\n  }\r\n  console.log(nodes.length)\r\n  return nodes;\r\n}\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called *after* the dijkstra method above.\r\nexport function getNodesInShortestPathOrder(finishNode) \r\n{\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}