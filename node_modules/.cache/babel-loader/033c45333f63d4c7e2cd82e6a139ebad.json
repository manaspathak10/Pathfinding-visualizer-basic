{"ast":null,"code":"export function dfs(grid, startNode, finishNode) {\n  let s = [];\n  let explored = new Set();\n  s.push(startNode);\n  explored.add(startNode);\n\n  while (!s.isEmpty()) {\n    let t = s.shift();\n    if (t.isWall) continue;\n    this.edges[t].filter(n => !explored.has(n)).forEach(n => {\n      explored.add(n);\n      s.push(n);\n    });\n  } // const visitedNodesInOrder = [];\n  // startNode.distance = 0;\n  // const unvisitedNodes = getAllNodes(grid);\n  // while (!!unvisitedNodes.length) {\n  //   //console.log(unvisitedNodes);\n  //   sortNodesByDistance(unvisitedNodes);\n  //   const closestNode = unvisitedNodes.shift();\n  //   // If we encounter a wall, we skip it.\n  //   if (closestNode.isWall) continue;\n  //   // If the closest node is at a distance of infinity,\n  //   // we must be trapped and should therefore stop.\n  //   if (closestNode.distance === Infinity) return visitedNodesInOrder;\n  //   closestNode.isVisited = true;\n  //   visitedNodesInOrder.push(closestNode);\n  //   if (closestNode === finishNode) return visitedNodesInOrder;\n  //   updateUnvisitedNeighbors(closestNode, grid);\n\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const {\n    col,\n    row\n  } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n\n  for (const row of grid) {\n    for (const node of row) {\n      if (node.isWall) continue;\n      nodes.push(node);\n    }\n  }\n\n  console.log(nodes.length);\n  return nodes;\n} // Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\n\n\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n\n  return nodesInShortestPathOrder;\n}","map":{"version":3,"sources":["C:/Users/R/Desktop/Pathfinding-visualizer-basic/src/algorithms/dfs.js"],"names":["dfs","grid","startNode","finishNode","s","explored","Set","push","add","isEmpty","t","shift","isWall","edges","filter","n","has","forEach","sortNodesByDistance","unvisitedNodes","sort","nodeA","nodeB","distance","updateUnvisitedNeighbors","node","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","previousNode","neighbors","col","row","length","isVisited","getAllNodes","nodes","console","log","getNodesInShortestPathOrder","nodesInShortestPathOrder","currentNode","unshift"],"mappings":"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","sourcesContent":["export function dfs(grid, startNode, finishNode) \r\n{\r\n\tlet s= [];\r\n\tlet explored=new Set();\r\n\ts.push(startNode);\r\n\texplored.add(startNode);\r\n\twhile(!s.isEmpty())\r\n\t{\r\n\t\tlet t=s.shift();\r\n\t\tif(t.isWall) continue;\r\n\t\tthis.edges[t].filter(n=>!explored.has(n)).forEach(n=>{explored.add(n);s.push(n);})\t;\r\n\t}\r\n\r\n\r\n  // const visitedNodesInOrder = [];\r\n  // startNode.distance = 0;\r\n  // const unvisitedNodes = getAllNodes(grid);\r\n  // while (!!unvisitedNodes.length) {\r\n  //   //console.log(unvisitedNodes);\r\n  //   sortNodesByDistance(unvisitedNodes);\r\n  //   const closestNode = unvisitedNodes.shift();\r\n  //   // If we encounter a wall, we skip it.\r\n  //   if (closestNode.isWall) continue;\r\n  //   // If the closest node is at a distance of infinity,\r\n  //   // we must be trapped and should therefore stop.\r\n  //   if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n  //   closestNode.isVisited = true;\r\n  //   visitedNodesInOrder.push(closestNode);\r\n  //   if (closestNode === finishNode) return visitedNodesInOrder;\r\n  //   updateUnvisitedNeighbors(closestNode, grid);\r\n  }\r\n\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const { col, row } = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      if(node.isWall) continue;\r\n      nodes.push(node);\r\n      \r\n    }\r\n  }\r\n  console.log(nodes.length)\r\n  return nodes;\r\n}\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called *after* the dijkstra method above.\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}