{"ast":null,"code":"export function dfs(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  const dfsstack = [];\n  dfsstack.push(startNode);\n  startNode.distance = 0;\n\n  while (dfsstack.length) {\n    const currNode = dfsstack.pop();\n    if (currNode.isWall || currNode.isVisited) continue;\n    if (currNode == finishNode) return visitedNodesInOrder;\n    currNode.isVisited = true;\n    let nextNode;\n    const {\n      row,\n      col\n    } = currNode;\n\n    if (row > 0) {\n      nextNode = grid[row - 1][col];\n\n      if (!nextNode.isVisited) {\n        nextNode.previousNode = currNode;\n        dfsstack.push(nextNode);\n      }\n    }\n\n    if (row < grid.length - 1) {\n      nextNode = grid[row + 1][col];\n\n      if (!nextNode.isVisited) {\n        nextNode.previousNode = currNode;\n        dfsstack.push(nextNode);\n      }\n    }\n\n    if (col > 0) {\n      nextNode = grid[row][col - 1];\n\n      if (!nextNode.isVisited) {\n        nextNode.previousNode = currNode;\n        dfsstack.push(nextNode);\n      }\n    }\n\n    if (col < grid[0].length - 1) {\n      nextNode = grid[row][col + 1];\n\n      if (!nextNode.isVisited) {\n        nextNode.previousNode = currNode;\n        dfsstack.push(nextNode);\n      }\n    }\n  }\n} // Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\n\nexport function getNodesInShortestPathOrderz(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n\n  return nodesInShortestPathOrder;\n}","map":{"version":3,"sources":["C:/Users/R/Desktop/Pathfinding-visualizer-basic/src/algorithms/dfs.js"],"names":["dfs","grid","startNode","finishNode","visitedNodesInOrder","dfsstack","push","distance","length","currNode","pop","isWall","isVisited","nextNode","row","col","previousNode","getNodesInShortestPathOrderz","nodesInShortestPathOrder","currentNode","unshift"],"mappings":"AAAA,OAAO,SAASA,GAAT,CAAaC,IAAb,EAAmBC,SAAnB,EAA8BC,UAA9B,EACP;AAEC,QAAMC,mBAAmB,GAAG,EAA5B;AACC,QAAMC,QAAQ,GAAC,EAAf;AACAA,EAAAA,QAAQ,CAACC,IAAT,CAAcJ,SAAd;AACAA,EAAAA,SAAS,CAACK,QAAV,GAAqB,CAArB;;AACA,SAAMF,QAAQ,CAACG,MAAf,EACA;AACC,UAAMC,QAAQ,GAACJ,QAAQ,CAACK,GAAT,EAAf;AACA,QAAGD,QAAQ,CAACE,MAAT,IAAmBF,QAAQ,CAACG,SAA/B,EAA0C;AAC1C,QAAGH,QAAQ,IAAEN,UAAb,EAAyB,OAAOC,mBAAP;AACzBK,IAAAA,QAAQ,CAACG,SAAT,GAAmB,IAAnB;AACA,QAAIC,QAAJ;AACA,UAAM;AAACC,MAAAA,GAAD;AAAKC,MAAAA;AAAL,QAAUN,QAAhB;;AACA,QAAGK,GAAG,GAAC,CAAP,EACA;AACCD,MAAAA,QAAQ,GAACZ,IAAI,CAACa,GAAG,GAAC,CAAL,CAAJ,CAAYC,GAAZ,CAAT;;AACA,UAAG,CAACF,QAAQ,CAACD,SAAb,EACA;AACCC,QAAAA,QAAQ,CAACG,YAAT,GAAsBP,QAAtB;AACAJ,QAAAA,QAAQ,CAACC,IAAT,CAAcO,QAAd;AACA;AACD;;AAED,QAAGC,GAAG,GAACb,IAAI,CAACO,MAAL,GAAY,CAAnB,EACA;AACCK,MAAAA,QAAQ,GAACZ,IAAI,CAACa,GAAG,GAAC,CAAL,CAAJ,CAAYC,GAAZ,CAAT;;AACA,UAAG,CAACF,QAAQ,CAACD,SAAb,EACA;AACCC,QAAAA,QAAQ,CAACG,YAAT,GAAsBP,QAAtB;AACAJ,QAAAA,QAAQ,CAACC,IAAT,CAAcO,QAAd;AACA;AACD;;AACD,QAAGE,GAAG,GAAC,CAAP,EACA;AACCF,MAAAA,QAAQ,GAACZ,IAAI,CAACa,GAAD,CAAJ,CAAUC,GAAG,GAAC,CAAd,CAAT;;AACA,UAAG,CAACF,QAAQ,CAACD,SAAb,EACA;AACCC,QAAAA,QAAQ,CAACG,YAAT,GAAsBP,QAAtB;AACAJ,QAAAA,QAAQ,CAACC,IAAT,CAAcO,QAAd;AACA;AACD;;AACD,QAAGE,GAAG,GAACd,IAAI,CAAC,CAAD,CAAJ,CAAQO,MAAR,GAAe,CAAtB,EACA;AACCK,MAAAA,QAAQ,GAACZ,IAAI,CAACa,GAAD,CAAJ,CAAUC,GAAG,GAAC,CAAd,CAAT;;AACA,UAAG,CAACF,QAAQ,CAACD,SAAb,EACA;AACCC,QAAAA,QAAQ,CAACG,YAAT,GAAsBP,QAAtB;AACAJ,QAAAA,QAAQ,CAACC,IAAT,CAAcO,QAAd;AACA;AACD;AACD;AAGF,C,CAID;AACA;;AACA,OAAO,SAASI,4BAAT,CAAsCd,UAAtC,EACP;AACE,QAAMe,wBAAwB,GAAG,EAAjC;AACA,MAAIC,WAAW,GAAGhB,UAAlB;;AACA,SAAOgB,WAAW,KAAK,IAAvB,EAA6B;AAC3BD,IAAAA,wBAAwB,CAACE,OAAzB,CAAiCD,WAAjC;AACAA,IAAAA,WAAW,GAAGA,WAAW,CAACH,YAA1B;AACD;;AACD,SAAOE,wBAAP;AACD","sourcesContent":["export function dfs(grid, startNode, finishNode) \r\n{\r\n\t\r\n\tconst visitedNodesInOrder = [];\r\n  const dfsstack=[]\r\n  dfsstack.push(startNode);\r\n  startNode.distance = 0;\r\n  while(dfsstack.length)\r\n  {\r\n  \tconst currNode=dfsstack.pop();\r\n  \tif(currNode.isWall || currNode.isVisited) continue;\r\n  \tif(currNode==finishNode) return visitedNodesInOrder;\r\n  \tcurrNode.isVisited=true;\r\n  \tlet nextNode;\r\n  \tconst {row,col}=currNode;\r\n  \tif(row>0)\r\n  \t{\r\n  \t\tnextNode=grid[row-1][col];\r\n  \t\tif(!nextNode.isVisited)\r\n  \t\t{\r\n  \t\t\tnextNode.previousNode=currNode;\r\n  \t\t\tdfsstack.push(nextNode);\r\n  \t\t}\r\n  \t}\r\n\r\n  \tif(row<grid.length-1)\r\n  \t{\r\n  \t\tnextNode=grid[row+1][col];\r\n  \t\tif(!nextNode.isVisited)\r\n  \t\t{\r\n  \t\t\tnextNode.previousNode=currNode;\r\n  \t\t\tdfsstack.push(nextNode);\r\n  \t\t}\r\n  \t}\r\n  \tif(col>0)\r\n  \t{\r\n  \t\tnextNode=grid[row][col-1];\r\n  \t\tif(!nextNode.isVisited)\r\n  \t\t{\r\n  \t\t\tnextNode.previousNode=currNode;\r\n  \t\t\tdfsstack.push(nextNode);\r\n  \t\t}\r\n  \t}\r\n  \tif(col<grid[0].length-1)\r\n  \t{\r\n  \t\tnextNode=grid[row][col+1];\r\n  \t\tif(!nextNode.isVisited)\r\n  \t\t{\r\n  \t\t\tnextNode.previousNode=currNode;\r\n  \t\t\tdfsstack.push(nextNode);\r\n  \t\t}\r\n  \t}\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called *after* the dijkstra method above.\r\nexport function getNodesInShortestPathOrderz(finishNode) \r\n{\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}